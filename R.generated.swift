//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `HistoryViewController`.
    static let historyViewController = _R.storyboard.historyViewController()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LoginViewController`.
    static let loginViewController = _R.storyboard.loginViewController()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `PriceViewController`.
    static let priceViewController = _R.storyboard.priceViewController()
    /// Storyboard `ProfileViewController`.
    static let profileViewController = _R.storyboard.profileViewController()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HistoryViewController", bundle: ...)`
    static func historyViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.historyViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LoginViewController", bundle: ...)`
    static func loginViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.loginViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "PriceViewController", bundle: ...)`
    static func priceViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.priceViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ProfileViewController", bundle: ...)`
    static func profileViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profileViewController)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 9 images.
  struct image {
    /// Image `bag`.
    static let bag = Rswift.ImageResource(bundle: R.hostingBundle, name: "bag")
    /// Image `history`.
    static let history = Rswift.ImageResource(bundle: R.hostingBundle, name: "history")
    /// Image `list`.
    static let list = Rswift.ImageResource(bundle: R.hostingBundle, name: "list")
    /// Image `processing`.
    static let processing = Rswift.ImageResource(bundle: R.hostingBundle, name: "processing")
    /// Image `profile`.
    static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile")
    /// Image `success`.
    static let success = Rswift.ImageResource(bundle: R.hostingBundle, name: "success")
    /// Image `transit`.
    static let transit = Rswift.ImageResource(bundle: R.hostingBundle, name: "transit")
    /// Image `Бутылка`.
    static let бутылка = Rswift.ImageResource(bundle: R.hostingBundle, name: "Бутылка")
    /// Image `Вода`.
    static let вода = Rswift.ImageResource(bundle: R.hostingBundle, name: "Вода")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bag", bundle: ..., traitCollection: ...)`
    static func bag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "history", bundle: ..., traitCollection: ...)`
    static func history(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.history, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "list", bundle: ..., traitCollection: ...)`
    static func list(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.list, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "processing", bundle: ..., traitCollection: ...)`
    static func processing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.processing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "success", bundle: ..., traitCollection: ...)`
    static func success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.success, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "transit", bundle: ..., traitCollection: ...)`
    static func transit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Бутылка", bundle: ..., traitCollection: ...)`
    static func бутылка(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.бутылка, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Вода", bundle: ..., traitCollection: ...)`
    static func вода(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.вода, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 9 nibs.
  struct nib {
    /// Nib `AlertViewCell`.
    static let alertViewCell = _R.nib._AlertViewCell()
    /// Nib `BagTableViewCell`.
    static let bagTableViewCell = _R.nib._BagTableViewCell()
    /// Nib `CalendarViewController`.
    static let calendarViewController = _R.nib._CalendarViewController()
    /// Nib `CalendarView`.
    static let calendarView = _R.nib._CalendarView()
    /// Nib `CustomAlertController`.
    static let customAlertController = _R.nib._CustomAlertController()
    /// Nib `HistoryTableViewCell`.
    static let historyTableViewCell = _R.nib._HistoryTableViewCell()
    /// Nib `HistoryTableViewHeader`.
    static let historyTableViewHeader = _R.nib._HistoryTableViewHeader()
    /// Nib `PriceTableViewCell`.
    static let priceTableViewCell = _R.nib._PriceTableViewCell()
    /// Nib `ProfileTableViewCell`.
    static let profileTableViewCell = _R.nib._ProfileTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AlertViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.alertViewCell) instead")
    static func alertViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.alertViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BagTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bagTableViewCell) instead")
    static func bagTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bagTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CalendarView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.calendarView) instead")
    static func calendarView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.calendarView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CalendarViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.calendarViewController) instead")
    static func calendarViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.calendarViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CustomAlertController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customAlertController) instead")
    static func customAlertController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customAlertController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HistoryTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.historyTableViewCell) instead")
    static func historyTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.historyTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HistoryTableViewHeader", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.historyTableViewHeader) instead")
    static func historyTableViewHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.historyTableViewHeader)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PriceTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.priceTableViewCell) instead")
    static func priceTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.priceTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileTableViewCell) instead")
    static func profileTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileTableViewCell)
    }
    #endif

    static func alertViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AlertViewCell? {
      return R.nib.alertViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AlertViewCell
    }

    static func bagTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BagTableViewCell? {
      return R.nib.bagTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BagTableViewCell
    }

    static func calendarView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.calendarView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func calendarViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.calendarViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func customAlertController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.customAlertController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func historyTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HistoryTableViewCell? {
      return R.nib.historyTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HistoryTableViewCell
    }

    static func historyTableViewHeader(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HistoryTableViewHeader? {
      return R.nib.historyTableViewHeader.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HistoryTableViewHeader
    }

    static func priceTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PriceTableViewCell? {
      return R.nib.priceTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PriceTableViewCell
    }

    static func profileTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileTableViewCell? {
      return R.nib.profileTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 5 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AlertViewCell`.
    static let alertViewCell: Rswift.ReuseIdentifier<AlertViewCell> = Rswift.ReuseIdentifier(identifier: "AlertViewCell")
    /// Reuse identifier `BagTableViewCell`.
    static let bagTableViewCell: Rswift.ReuseIdentifier<BagTableViewCell> = Rswift.ReuseIdentifier(identifier: "BagTableViewCell")
    /// Reuse identifier `HistoryTableViewCell`.
    static let historyTableViewCell: Rswift.ReuseIdentifier<HistoryTableViewCell> = Rswift.ReuseIdentifier(identifier: "HistoryTableViewCell")
    /// Reuse identifier `PriceTableViewCell`.
    static let priceTableViewCell: Rswift.ReuseIdentifier<PriceTableViewCell> = Rswift.ReuseIdentifier(identifier: "PriceTableViewCell")
    /// Reuse identifier `ProfileTableViewCell`.
    static let profileTableViewCell: Rswift.ReuseIdentifier<ProfileTableViewCell> = Rswift.ReuseIdentifier(identifier: "ProfileTableViewCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _HistoryTableViewHeader.validate()
      try _PriceTableViewCell.validate()
      try _ProfileTableViewCell.validate()
    }

    struct _AlertViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AlertViewCell

      let bundle = R.hostingBundle
      let identifier = "AlertViewCell"
      let name = "AlertViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AlertViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AlertViewCell
      }

      fileprivate init() {}
    }

    struct _BagTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = BagTableViewCell

      let bundle = R.hostingBundle
      let identifier = "BagTableViewCell"
      let name = "BagTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BagTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BagTableViewCell
      }

      fileprivate init() {}
    }

    struct _CalendarView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CalendarView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CalendarViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CalendarViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CustomAlertController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomAlertController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _HistoryTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HistoryTableViewCell

      let bundle = R.hostingBundle
      let identifier = "HistoryTableViewCell"
      let name = "HistoryTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HistoryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HistoryTableViewCell
      }

      fileprivate init() {}
    }

    struct _HistoryTableViewHeader: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HistoryTableViewHeader"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HistoryTableViewHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HistoryTableViewHeader
      }

      static func validate() throws {
        if UIKit.UIImage(named: "bin.xmark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bin.xmark' is used in nib 'HistoryTableViewHeader', but couldn't be loaded.") }
        if UIKit.UIImage(named: "processing", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'processing' is used in nib 'HistoryTableViewHeader', but couldn't be loaded.") }
        if UIKit.UIImage(named: "square.and.arrow.down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'square.and.arrow.down' is used in nib 'HistoryTableViewHeader', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PriceTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PriceTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PriceTableViewCell"
      let name = "PriceTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PriceTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PriceTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "pencil", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pencil' is used in nib 'PriceTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProfileTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProfileTableViewCell

      let bundle = R.hostingBundle
      let identifier = "ProfileTableViewCell"
      let name = "ProfileTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "location.fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'location.fill' is used in nib 'ProfileTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "person.circle.fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'person.circle.fill' is used in nib 'ProfileTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "phone.circle.fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'phone.circle.fill' is used in nib 'ProfileTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try historyViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try loginViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try priceViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profileViewController.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct historyViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let historyViewController = StoryboardViewControllerResource<HistoryViewController>(identifier: "HistoryViewController")
      let name = "HistoryViewController"

      func historyViewController(_: Void = ()) -> HistoryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: historyViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.historyViewController().historyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'historyViewController' could not be loaded from storyboard 'HistoryViewController' as 'HistoryViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "Бутылка", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Бутылка' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Вода", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Вода' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct loginViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "LoginViewController"
      let passwordResetViewController = StoryboardViewControllerResource<PasswordResetViewController>(identifier: "PasswordResetViewController")
      let signUPViewController = StoryboardViewControllerResource<SignUPViewController>(identifier: "SignUPViewController")

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      func passwordResetViewController(_: Void = ()) -> PasswordResetViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: passwordResetViewController)
      }

      func signUPViewController(_: Void = ()) -> SignUPViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUPViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Бутылка", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Бутылка' is used in storyboard 'LoginViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Вода", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Вода' is used in storyboard 'LoginViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.loginViewController().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'LoginViewController' as 'LoginViewController'.") }
        if _R.storyboard.loginViewController().passwordResetViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'passwordResetViewController' could not be loaded from storyboard 'LoginViewController' as 'PasswordResetViewController'.") }
        if _R.storyboard.loginViewController().signUPViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUPViewController' could not be loaded from storyboard 'LoginViewController' as 'SignUPViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct priceViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bagViewController = StoryboardViewControllerResource<BagViewController>(identifier: "BagViewController")
      let bundle = R.hostingBundle
      let name = "PriceViewController"
      let priceViewController = StoryboardViewControllerResource<PriceViewController>(identifier: "PriceViewController")

      func bagViewController(_: Void = ()) -> BagViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bagViewController)
      }

      func priceViewController(_: Void = ()) -> PriceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: priceViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.priceViewController().bagViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bagViewController' could not be loaded from storyboard 'PriceViewController' as 'BagViewController'.") }
        if _R.storyboard.priceViewController().priceViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'priceViewController' could not be loaded from storyboard 'PriceViewController' as 'PriceViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profileViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProfileViewController"
      let profileViewController = StoryboardViewControllerResource<ProfileViewController>(identifier: "ProfileViewController")

      func profileViewController(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.profileViewController().profileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileViewController' could not be loaded from storyboard 'ProfileViewController' as 'ProfileViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
